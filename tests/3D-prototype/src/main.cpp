#include <iostream>
#include <cstdio>
#include "render.hpp"
#include "view.hpp"

void writeBMP(const char* filename, char* data, int W, int H)
// data: RGB, top left -> bottom right, no padding
{
	FILE* fout = fopen(filename, "wb");
	char h[54] = "BM";
	h[10] = 54; // header size
	h[14] = 40; // info size
	h[26] = 1;
	h[28] = 24; // bit per pixel
	int size = 54 + (W*3+3)/4*4*H;
	memcpy(h+2, &size, 4);
	memcpy(h+18, &W, 4);
	memcpy(h+22, &H, 4);
	fwrite(h, 54, 1, fout);
	for (int y=H-1; ~y; --y) {
		for (int x=0; x<W; ++x)
			for (int k=2; ~k; --k) // RGB -> BGR
				fwrite(data+y*W*3+x*3+k, 1, 1, fout);
		// pad to 4n bytes per row
		fwrite(h+30, 1, W%4, fout);
	}
	fclose(fout);
}

int main()
{
	int n_trig = 20;
	Vertex v[] = {
		// tall block
		{4.23, 3.30, 2.47, 1, 0.0, 0.0},
		{2.65, 3.30, 2.96, 1, 0.0, 1.0},
		{3.14, 3.30, 4.56, 1, 1.0, 1.0},

		{4.23, 3.30, 2.47, 1, 0.0, 0.0},
		{3.14, 3.30, 4.56, 1, 1.0, 1.0},
		{4.72, 3.30, 4.06, 1, 1.0, 0.0},
		 
		{4.23, 0.00, 2.47, 1, 0.0, 0.0},
		{4.23, 3.30, 2.47, 1, 0.0, 1.0},
		{4.72, 3.30, 4.06, 1, 1.0, 1.0},

		{4.23, 0.00, 2.47, 1, 0.0, 0.0},
		{4.72, 3.30, 4.06, 1, 1.0, 1.0},
		{4.72, 0.00, 4.06, 1, 1.0, 0.0},
		 
		{4.72, 0.00, 4.06, 1, 0.0, 0.0},
		{4.72, 3.30, 4.06, 1, 0.0, 1.0},
		{3.14, 3.30, 4.56, 1, 1.0, 1.0},

		{4.72, 0.00, 4.06, 1, 0.0, 0.0},
		{3.14, 3.30, 4.56, 1, 1.0, 1.0},
		{3.14, 0.00, 4.56, 1, 1.0, 0.0},

		{3.14, 0.00, 4.56, 1, 0.0, 0.0},
		{3.14, 3.30, 4.56, 1, 0.0, 1.0},
		{2.65, 3.30, 2.96, 1, 1.0, 1.0},

		{3.14, 0.00, 4.56, 1, 0.0, 0.0},
		{2.65, 3.30, 2.96, 1, 1.0, 1.0},
		{2.65, 0.00, 2.96, 1, 1.0, 0.0},
		 
		{2.65, 0.00, 2.96, 1, 0.0, 0.0},
		{2.65, 3.30, 2.96, 1, 0.0, 1.0},
		{4.23, 3.30, 2.47, 1, 1.0, 1.0},

		{2.65, 0.00, 2.96, 1, 0.0, 0.0},
		{4.23, 3.30, 2.47, 1, 1.0, 1.0},
		{4.23, 0.00, 2.47, 1, 1.0, 0.0},

		// short block
		{1.30, 1.65, 0.65, 1, 0.0, 0.0}, 
		{0.82, 1.65, 2.25, 1, 0.0, 1.0},
		{2.40, 1.65, 2.72, 1, 1.0, 1.0},

		{1.30, 1.65, 0.65, 1, 0.0, 0.0}, 
		{2.40, 1.65, 2.72, 1, 1.0, 1.0},
		{2.90, 1.65, 1.14, 1, 1.0, 0.0},
		 
		{2.90, 0.00, 1.14, 1, 0.0, 0.0},
		{2.90, 1.65, 1.14, 1, 0.0, 1.0},
		{2.40, 1.65, 2.72, 1, 1.0, 1.0},

		{2.90, 0.00, 1.14, 1, 0.0, 0.0},
		{2.40, 1.65, 2.72, 1, 1.0, 1.0},
		{2.40, 0.00, 2.72, 1, 1.0, 0.0},

		{1.30, 0.00, 0.65, 1, 0.0, 0.0},
		{1.30, 1.65, 0.65, 1, 0.0, 1.0},
		{2.90, 1.65, 1.14, 1, 1.0, 1.0},

		{1.30, 0.00, 0.65, 1, 0.0, 0.0},
		{2.90, 1.65, 1.14, 1, 1.0, 1.0},
		{2.90, 0.00, 1.14, 1, 1.0, 0.0},
		 
		{0.82, 0.00, 2.25, 1, 0.0, 0.0},
		{0.82, 1.65, 2.25, 1, 0.0, 1.0},
		{1.30, 1.65, 0.65, 1, 1.0, 1.0},

		{0.82, 0.00, 2.25, 1, 0.0, 0.0},
		{1.30, 1.65, 0.65, 1, 1.0, 1.0},
		{1.30, 0.00, 0.65, 1, 1.0, 0.0},
		
		{2.40, 0.00, 2.72, 1, 0.0, 0.0},
		{2.40, 1.65, 2.72, 1, 0.0, 1.0},
		{0.82, 1.65, 2.25, 1, 1.0, 1.0},

		{2.40, 0.00, 2.72, 1, 0.0, 0.0},
		{0.82, 1.65, 2.25, 1, 1.0, 1.0},
		{0.82, 0.00, 2.25, 1, 1.0, 0.0},
	};
	// console.log(perspective(1,1.33333,0.1,10));
	// console.log(lookAt(vec3(2.78, 2.73, -8), vec3(0,0,1), vec3(0,1,0), vec3(-1,0,0)));
	// mat4 view = viewport(640,480,1) * perspective(0.5,1.33333,0.1,10) * lookAt(vec3(2.78, 2.73, -8), vec3(0,0,1), vec3(0,1,0), vec3(-1,0,0));
	vec3 pos(2.78, 2.73, -8);
	vec3 dir(0,0,1);
	vec3 up(0,1,0);
	vec3 right(-1,0,0);
	mat4 view = perspective(0.37,1.33333,0.1,20) * lookAt(pos, dir, up, right);
	char result[640*480*3] = {0};
	render(view, n_trig, v, result);
	writeBMP("1.bmp", result, 640, 480);
}